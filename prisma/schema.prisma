// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== AUTHENTICATION MODELS ====================

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String?   @unique
  firstName     String?
  lastName      String?
  passwordHash  String?   // Made optional for OAuth users
  image         String?   // Profile picture from OAuth
  emailVerified Boolean   @default(false)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sessions      Session[]
  accounts      Account[] // OAuth accounts
  projects      Project[]
  subscription  Subscription?
  payments      Payment[]
  verificationTokens VerificationToken[]
  passwordResets PasswordReset[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}

model VerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  type      TokenType
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

// ==================== BILLING MODELS ====================

model Subscription {
  id              String            @id @default(uuid())
  userId          String            @unique
  planId          String
  status          SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean        @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id])
  
  @@index([userId])
  @@index([planId])
}

model Plan {
  id            String   @id @default(uuid())
  name          String   @unique
  displayName   String
  description   String?
  price         Float
  currency      String   @default("USD")
  interval      BillingInterval
  features      Json
  credits       Int      @default(100)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subscriptions Subscription[]
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus
  paymentMethod   String?
  transactionId   String?       @unique
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([transactionId])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIAL
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

// ==================== PROJECT MODELS ====================

model Project {
  id        String   @id @default(uuid())
  name      String
  userId    String
  techStack String   @default("react-nextjs")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  
  @@index([userId])
}

enum MessageRole {
  USER
  ASSISTANT
}
enum MessageType {
  RESULT
  ERROR
  COOKING
}

model Message {
  id        String      @id @default(cuid())
  role      MessageRole
  type      MessageType
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  projectId String
  project  Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  fragments Fragment?
  // @@index([createdAt])
}

model Fragment {
  id        String      @id @default(cuid())
  messageId String @unique
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  sandboxUrl String
  title String
  files Json
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // @@index([createdAt])
}

model Usage {
  key String   @id
  points Int
  expire DateTime?
}